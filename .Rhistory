numeros <- c(1,2,3,7,6,4,5)
maximo <- function(vector){
maximo <- 0
for(num in vector){
if(num > maximo){
maximo = num
}
}
return(maximo)
}
resultado <- maximo(numeros)
numeros <- c(1,2,3,7,6,4,5)
maximo <- function(vector){
maximo <- 0
for(num in vector){
if(num > maximo){
maximo = num
}
}
return(maximo)
}
resultado <- maximo(numeros)
print(resultado)
media <- function(n1, n2){
resultado <- n1 + n2 / 2
return(resultado)
}
resultado <- media(media)
media <- function(n1, n2){
resultado <- n1 + n2 / 2
return(resultado)
}
resultado <- media(3,7)
print(resultado)
resultado <- (n1 + n2) / 2
media <- function(n1, n2){
resultado <- (n1 + n2) / 2
return(resultado)
}
resultado <- media(3,7)
print(resultado)
numeros <- matrix(1:10)
print(numeros)
numeros <- matrix(1:10, nrow = 2)
print(numeros)
numeros <- matrix(1:10, nrow = 3)
numeros <- matrix(1:10, nrow = 3)
numeros <- matrix(1:10, nrow = 5)
print(numeros)
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
for(element in matriz){
}
}
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
acc <- 0
for(element in matriz){
acc <- acc + element
}
print(acc)
}
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
acc <- 0
for(element in matriz){
acc <- acc + element
}
return(acc)
}
resultado <- sumMatriz(numeros)
print(resultado)
# secuencias
seq(1:10)
seq(1:10, by=2)
# secuencias
seq(1, 10)
seq(1, 10, by=2)
# secuencias
seq(1, 10)
seq(1, 10, by=2)
# sorting
vector <- c(1,8,4,1,6,87,3)
sort(vector)
# revertir orden
rev(vector)
# sobre vector
vector <- c(1,2,3)
suma <- function(numero){
resultado <- numero + 10
return(resultado)
}
print(vector)
vector2 <- sapply(vector, suma)
print(vector2)
# sobre lista
lista <- list(1,2,3)
aleatorio <- function(numero){
numero.aleatorio <- sample(1:100, 1)
print(numero.aleatorio)
resultado <- numero + numero.aleatorio
return(resultado)
}
print(lista)
lista2 <- lapply(lista, aleatorio)
print(lista2)
# Funciones anonimas
vector <- c(1,2,3)
vector2 <- sapply(vector, function(numero){ numero + 2 })
vector2
# Funciones matematicas
abs(2)
# Funciones matematicas
abs(2)
abd(-4)
# Funciones matematicas
abs(2)
# Funciones matematicas
abs(2)
abs(-4)
vector <- c(-1,2,-3,4)
abs(vector)
sum(1,2,3,4)
vector <- c(1,2,3,4,5,6)
sum(vector)
matriz <- matrix(1:12, nrow = 3)
matriz
sum(matriz)
mean(matriz)
mean(vector)
valores <- sample(1:100, 12)
valores
matriz2 <- matrix(valores, nrow = 3)
matriz2
min(matriz2)
max(matriz2)
round(2.435345, 2)
round(2.435345, 3)
# Expresiones regulares
texto <- 'Hola, buenos días, como estas?'
# Expresiones regulares
texto <- 'Hola, buenos días, como estas?'
grepl('AAAAAAAAAAAAA', texto)
grepl('días', texto)
grep('días', texto)
vector <- c(1,2,3,4,5)
grep(3, vector)
grepl(3, vector)
# fecha y hora
fecha <- Sys.Date()
fecha
# fecha y hora
fecha <- Sys.Date()
fecha
fecha2 <- "2020-01-01"
class(fecha2)
class(fecha)
fecha2 <- as.Date(fecha2)
fecha2
class(fecha2)
fecha3 <- as.Date("04-01-2020", format="%m-%d-%Y")
fecha3
class(fecha3)
Sys.time()
format(Sys.time, format="%H:%M:%S")
Sys.time()
format(Sys.time, format="%H:%M:%S")
format(Sys.time(), format="%H:%M:%S")
strptime("12:00:00", format="%H:%M:%S")
# Manipulacion de datos con dplyr
# install package
install.packages('dplyr')
library(dplyr)
library(nycflights13)
library(nycflights13)
install.packages('nycflights13')
library(dplyr)
library(nycflights13)
str(flights)
head(flights)
filter(flights, month == 4, day == 10)
select(flights, origin, dest, air_time)
select(flights, origin, dest, air_time, flight)
slice(flights, 1:5)
arrange(flights, year, month, day, dep_time)
arrange(flights, year, month, day, desc(dep_time)
arrange(flights, year, month, day, desc(dep_time))
arrange(flights, year, month, day, desc(dep_time))
rename(flights, aerolina = carrier)
distinct(select(flights, carrier))
summarise(flights, media = mean(air_time, na.rm = TRUE))
# operador pipe
coches <- mtcars
head(coches)
# operador pipe
coches <- mtcars
head(coches)
# operador pipe
coches <- mtcars
head(coches)
resultado <- ararnge(sample_n(filter(coches, mpg > 20), size = 5, desc(mpg)))
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5, desc(mpg)))
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5, desc(mpg)))
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5), desc(mpg))
resultado
# operador pipe
coches <- mtcars
head(coches)
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5), desc(mpg))
resultado
paso1 <- filter(coches, mpg > 20)
paso2 <- sample_n(paso1, size = 5)
paso3 <- arrange(paso2, desc(mpg))
resultado2 <- paso3
resultado2
resultado3 <- coches %>% filter(mpg > 20) %>% sample_n(size = 5) %>% arrange(desc(mpg))
resultado3
# limpieza de datos
# instalacion de paquetes
install.packages('tidyr')
install.packages('data.table')
library(tidyr)
library(data.table)
año <- c(2018, 2019, 2020)
enero <- c(120, 100, 80)
febrero <- c(80, 90, 140)
marzo <- c(110, 150, 70)
datos <- data.frame(año=año, enero=enero, febrero=febrero, marzo=marzo)
datos
datos
datos <- gather(datos, Mes, Ingresos, enero:marzo)
datos
help('gather')
datos <- spread(datos, Mes, Ingresos)
datos
datos2 <- data.frame(columna=c('a.b', 'c.d', 'e.f'))
datos2
datos2 <- separate(datos2, columna, c('c1', 'c2'))
datos2
datos2 <- unite(datos2, columna, c1, c2, sep = '.')
datos2
# Histogramas
install.packages('ggplot2')
install.packages('ggplot2movies')
library(ggplot2)
library(ggplot2movies)
peliculas <- movies
head(peliculas)
peliculas[c('title', 'year', 'rating')]
datos <- ggplot(peliculas, aes(x = rating))
histograma <- datos + geom_histogram()
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3)
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3, color = 'green')
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3, color = 'green', fill = 'green')
print(histograma)
histograma <- histograma + xlab('Puntuacion') + ylab('Frecuencia') + ggtitle('Histograma')
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3)
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3, color = 'green')
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3, color = 'green', fill = 'green')
print(histograma)
histograma <- datos + geom_histogram(binwidth = 0.3, color = 'green', fill = 'green', alpha = 0.3)
print(histograma)
histograma <- histograma + xlab('Puntuacion') + ylab('Frecuencia') + ggtitle('Histograma')
print(histograma)
# Scatterplots
library(ggplot2)
coches <- mtcars
head(coches)
# Scatterplots
library(ggplot2)
coches <- mtcars
head(coches)
grafico <- ggplot(coches, aes(x = disp, y = mpt))
grafico <- grafico + geom_point()
print(grafico)
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- grafico + geom_point()
print(grafico)
grafico <- grafico + geom_point(size = 8, alpha = 0.4)
print(grafico)
grafico <- grafico + geom_point(size = 8, color = 'red')
print(grafico)
grafico <- grafico + geom_point(size = 8, color = '#2717C4')
print(grafico)
grafico <- grafico + geom_point(aes(size = wt))
print(grafico)
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- geom_point(size = 8, aes(color = hp))
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- geom_point(size = 8, aes(color = hp))
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
# Scatterplots
library(ggplot2)
coches <- mtcars
head(coches)
# Scatterplots
library(ggplot2)
coches <- mtcars
head(coches)
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- grafico + geom_point()
print(grafico)
grafico <- grafico + geom_point(size = 8, alpha = 0.4)
print(grafico)
grafico <- grafico + geom_point(size = 8, color = 'red')
print(grafico)
grafico <- grafico + geom_point(size = 8, color = '#2717C4')
print(grafico)
grafico <- grafico + geom_point(aes(size = wt))
print(grafico)
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- geom_point(size = 8, aes(color = hp))
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
print(grafico)
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- geom_point()
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
grafico <- geom_point(size = 8, aes(color = hp))
print(grafico)
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- grafico <- geom_point(size = 8, aes(color = hp))
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
grafico <- ggplot(coches, aes(x = disp, y = mpg))
grafico <- grafico + geom_point(size = 8, aes(color = hp))
grafico <- grafico + scale_color_gradient(low = 'blue', high = 'red')
print(grafico)
# barplots
library(ggplot2)
datos <- mpg
head(datos)
# barplots
library(ggplot2)
datos <- mpg
head(datos)
str(datos)
grafico <- ggplot(datos, aes(x = class))
grafico <- grafico + geom_bar()
print(grafico)
print(grafico)
grafico <- grafico + geom_bar(color = 'red', fill = 'blue')
print(grafico)
grafico <- grafico + geom_bar(color = '#33e32a', fill = 'blue')
print(grafico)
grafico <- grafico + geom_bar(aes(fill = drv))
print(grafico)
# boxplots
library(ggplot2)
datos <- mtcars
head(datos)
grafico <- ggplot(datos, aes(x = factory(cyl), y = mpg))
grafico <- ggplot(datos, aes(x = factory(cyl), y = mpg))
grafico <- grafico + geom_boxplot()
print(grafico)
grafico <- ggplot(datos, aes(x = factor(cyl), y = mpg))
grafico <- grafico + geom_boxplot()
print(grafico)
grafico <- grafico + geom_boxplot(fill = 'green')
print(grafico)
grafico <- grafico + geom_boxplot(aes(fill = factor(cyl)))
print(grafico)
grafico <- grafico + theme_dark()
print(grafico)
grafico <- grafico + theme_light()
print(grafico)
# distribucion de 2 variables
library(ggplot2)
library(ggplot2movies)
peliculas <- movies
head(peliculas)
grafico <- ggplot(peliculas, aes(x = year, y = rating))
grafico <- grafico + geom_bin2d()
print(grafico)
grafico <- grafico + scale_fill_gradient(low = 'blue', high = 'red')
print(grafico)
grafico <- ggplot(peliculas, aes(x = year, y = rating))
grafico <- grafico + geom_density2d()
print(grafico)
# limites y dimensiones de las graficas
library(ggplot2)
datos <- mpg
head(datos)
str(datos)
# limites y dimensiones de las graficas
library(ggplot2)
datos <- mpg
head(datos)
str(datos)
grafico <- ggplot(datos, aes(x = displ, y = hwy))
grafico <- grafico + geom_point()
print(grafico)
grafico <- grafico + coord_cartesian(xlim = c(2,5), ylim = c(20, 30)
grafico <- grafico + coord_cartesian(xlim = c(2,5), ylim = c(20, 30))
print(grafico)
# limites y dimensiones de las graficas
library(ggplot2)
datos <- mpg
head(datos)
str(datos)
grafico <- ggplot(datos, aes(x = displ, y = hwy))
grafico <- grafico + geom_point()
print(grafico)
grafico <- grafico + coord_cartesian(xlim = c(2,5), ylim = c(20, 30))
print(grafico)
grafico <- ggplot(datos, aes(x = displ, y = hwy))
grafico <- grafico + geom_point()
print(grafico)
# Graficos interactivos con ploty
install.packages('ploty')
library(ploty)
# Graficos interactivos con ploty
install.packages('plotly')
library(ploty)
library(ggplot2)
# Graficos interactivos con ploty
install.packages('plotly')
library(plotly)
library(ggplot2)
datos <- mtcars
head(datos)
grafico <- ggplot(datos, aes(mpg, wt) + geom_point())
grafico <- ggplot(datos, aes(mpg, wt)) + geom_point()
print(grafico)
grafico2 <- ggplotly(grafico)
print(grafico2)
set.seed(123)
df <- data.frame(x <- rchisq(1000, 5, 10), group <- sample(LETTERS[1:5], size = 1000, replace = T))
p <- ggplot(df, aes(x, fill = group)) + geom_density(alpha = 0.5, position = 'stack') + ggtitle('stacked chart')
fig <- ggplotly(p)
fig
# regresion lineal
datos <- read.csv('Resources\student-mat.csv', sep = ';')
# regresion lineal
datos <- read.csv('Resources/student-mat.csv', sep = ';')
head(datos)
any(is.na(datos))
library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(dplyr)
columnas.numericas <- sapply(datos, is.numeric)
head(columnas.numericas)
datos.correlacion <- cor(datos[, columnas.numericas])
print(datos.correlacion)
install.packages('corrplot')
library(corrplot)
library(corrgram)
install.packages('corrgram')
library(corrgram)
grafico <- corrplot(datos.correlacion, method = 'color')
corrgram(datos)
ggplot(datos, aes(x = G3)) + geom_histogram(bins = 20, alpha = 0.5, fill = 'blue')
install.packages('caTools')
set.seed(80)
library(caTools)
set.seed(80)
ejemplo <- sample.split(dats$G3, SplitRatio = 0.7)
ejemplo <- sample.split(data$G3, SplitRatio = 0.7)
set.seed(80)
ejemplo <- sample.split(datos$G3, SplitRatio = 0.7)
entrenamiento <- subset(datos, ejemplo == TRUE)
pruebas <- subset(datos, ejemplo == FALSE)
modelo <- lm(G3 ~., entrenamiento)
print(summarise(modelo))
print(summary(modelo))
ggplot(residuos, aes(residuos), + geom_histogram(fill = 'blue', alpha = 0.5))
plot(modelo)
predicciones <- predict(modelo, pruebas)
resultados <- cbind(predicciones, pruebas$G3)
head(resultados)
colnames(resultados <- c('prediccion','real'))
resultados <- data.frame(resultados)
colnames(resultados) <- c('prediccion','real')
colnames(resultados) <- c('prediccion','real')
head(resultados)
colnames(resultados) <- c('prediccion','real')
head(resultados)
predicciones <- predict(modelo, pruebas)
resultados <- cbind(predicciones, pruebas$G3)
head(resultados)
colnames(resultados) <- c('prediccion','real')
resultados <- data.frame(resultados)
head(resultados)
min(resultados)
cero <- function(x) {
if(x < 0){
return(0)
}else{
return(x)
}
}
resultados$prediccion <- sapply(resultados$prediccion, cero)
min(resultados)
error <- mean((resultados$real - resultados$prediccion)^2)
error
sse <- sum((resultados$prediccion - resultados$real)^2)
sst <- sum((mean(datos$G3 - resultados$real))^2)
sst <- sum((mean(datos$G3) - resultados$real)^2)
resultado <- 1 - sse/sst
resultado
