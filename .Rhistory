autos <- mtcars
# 2.- Verificar si coches es un dataframe
class(autos)
# 3.- Imprimir las primeras seis lineas
autos[1:6,]
# 1.- Crear la variable de coches que almacene el dataset mtcars
coches <- mtcars
# 2.- Verificar si coches es un dataframe
class(coches)
# 3.- Imprimir las primeras seis lineas de coches
coches[1:6,]
# 4.- Cual es la media de la columna mpg
mean(coches$mpg)
# 5.- Cual es el valor de cyl para el coche 'Mazda RX4'
coches['Mazda RX4',]$cyl
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8,]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 && coches$disp > 400,]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 & & coches$disp > 400,]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 & coches$disp > 400,]
subset(coches, cyl == 8 & disp > 400)
# 7.- Selecciona las columnas disp y wt
coches[,c('disp', 'wt')]
# 1.- Crear la variable de coches que almacene el dataset mtcars
coches <- mtcars
# 2.- Verificar si coches es un dataframe
class(coches)
# 1.- Crear la variable de coches que almacene el dataset mtcars
coches <- mtcars
coches
# 2.- Verificar si coches es un dataframe
class(coches)
# 3.- Imprimir las primeras seis lineas de coches
head(coches, 6)
coches[1:6,]
# 4.- Cual es la media de la columna mpg
mean(coches$mpg)
# 5.- Cual es el valor de cyl para el coche 'Mazda RX4'
coches['Mazda RX4',]$cyl
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 & coches$disp > 400,]
subset(coches, cyl == 8 & disp > 400)
# 7.- Selecciona las columnas disp y wt
coches[,c('disp', 'wt')]
# 8.- Crear una nueva columna, rendimiento que sea igual a hp/wt
coches$rendimiento <- coches$hp / coches$wt
head(coches)
clear
source("~/Documentos/Programming/R-course/Entrada y salida de datos/Entrada y salida de datos.R", echo=TRUE)
matriz
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
matriz
write.csv(matriz, file = 'Entrada y salida de datos/fichero1.csv')
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
matriz
write.csv(matriz, file = 'Entrada y salida de datos/fichero1.csv')
datos <- read.csv('Entrada y salida de datos/fichero1.csv')
datos
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
matriz
write.csv(matriz, file = 'Entrada y salida de datos/fichero1.csv')
datos <- read.csv('Entrada y salida de datos/fichero1.csv')
datos
datos$X <- NULL
datos
class(datos)
head(datos)
datos$suma <- datos$V1 + datos$V2 + datos$V3 + datos$V4
datos
write.csv(datos, file = 'Entrada y salida de datos/fichero1a.csv')
# Ficheros EXCEL
# instalar paquete
install.packages('readxl')
# Ficheros EXCEL
# instalar paquete
install.packages('readxl')
#cargar libreria
library('readxl')
excel_sheets('Entrada y salida de datos/poblacion.xlsx')
datos <- read_excel('Entrada y salida de datos/poblacion.xlsx', sheet = 'Hoja 1')
datos
datos&Continente
excel_sheets('Entrada y salida de datos/poblacion.xlsx')
datos <- read_excel('Entrada y salida de datos/poblacion.xlsx', sheet = 'Hoja 1')
datos
datos&Continente
datos$Continente
datos
datos$Continente
datos$Densidad
str(datos)
str(datos)
excel <- lapply(excel_sheets('Entrada y salida de datos/poblacion.xlsx'), read_excel, path('Entrada y salida de datos/poblacion.xlsx'))
excel <- lapply(excel_sheets('Entrada y salida de datos/poblacion.xlsx'), read_excel, path('poblacion.xlsx'))
excel
excel
excel <- lapply(excel_sheets('Entrada y salida de datos/poblacion.xlsx'), read_excel, path('poblacion.xlsx'))
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
connection <- dbConnect(RSQLite::SQLite(), "basededatos.db")
res <- dbSendQuery(connection, 'SELECT * from coches WHERE cyl = 8')
dbClearResult(res)
connection <- dbConnect(RSQLite::SQLite(), "basededatos.db")
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
# referencia a la libreria
library(RSQLite)
connection <- dbConnect(RSQLite::SQLite(), "basededatos.db")
dbWriteTable(connection, "coches", mtcars)
dbWriteTable(connection, "coches", mtcars)
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
# Operadores logicos
numeros <- 20
# Operadores logicos
numeros <- 20
numero > 10
# Operadores logicos
numero <- 20
numero > 10
# part 2
head(mtcars)
datos <- mtcars
head(datos)
subset(datos, mpg > 20)
subset(datos, mpg > 20 & cyl == 6)
subset(datos, !(cyl == 6))
# Bucle while
numero <- 1
while(numero < 10){
texto <- paste("EL numero vale ", numero)
print(texto)
if(numero == 5){
break
}
numero <- numero + 1
}
# Bucle for
vector <- c(1,2,3,4)
for(elemento in vector){
print(elemento)
}
lista <- c(12, c(1,2,3), mtcars)
for(elemento in vector){
print(elemento)
}
lista <- c(12, c(1,2,3), mtcars)
for(elemento in lista){
print(elemento)
}
# funciones
hola <- function(nombre){
print("Hola, buenos dias")
}
hola("Fernando")
# funciones
hola <- function(nombre){
texto <- paste("Hola, buenos dias ", nombre)
print(texto)
}
# funciones
hola <- function(nombre){
texto <- paste("Hola, buenos dias ", nombre)
print(texto)
}
hola("Fernando")
sumar <-function(n1, n2){
resultado <- n1 + n2
print(resultado)
}
hola("Fernando")
# funciones
hola <- function(nombre){
texto <- paste("Hola, buenos dias", nombre)
print(texto)
}
hola("Fernando")
sumar <-function(n1, n2){
resultado <- n1 + n2
print("[1]: ", resultado)
return(resultado)
}
resultado <- sumar(1,4)
print("[2]: ", resultado)
sumar <-function(n1, n2){
resultado <- n1 + n2
return(resultado)
}
resultado <- sumar(8,4)
print(resultado)
vector <- c(1,2,3,4,5)
resultado <- sum(vector)
print(resultado)
numero <- 3
if(numero %% 2){
print("Es par")
}else{
print("Es impar")
}
typeof(num)
num <- 4
car <- "A"
typeof(num)
typeof(car)
num <- 4
car <- "A"
if(typeof(num) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- 4
if(typeof(element) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- "A"
if(typeof(element) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- "asdasd"
if(typeof(element) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- "asdasd"
if(typeof(element) == "character"){
print("Is a character")
}else if(typeof(element) == "double"){
print("Is a number")
}else{
print("Is a string")
}
numeros <- c(1,2,3,7,6,4,5)
maximo <- function(vector){
maximo <- 0
for(num in vector){
if(num > maximo){
maximo = num
}
}
return(maximo)
}
resultado <- maximo(numeros)
numeros <- c(1,2,3,7,6,4,5)
maximo <- function(vector){
maximo <- 0
for(num in vector){
if(num > maximo){
maximo = num
}
}
return(maximo)
}
resultado <- maximo(numeros)
print(resultado)
media <- function(n1, n2){
resultado <- n1 + n2 / 2
return(resultado)
}
resultado <- media(media)
media <- function(n1, n2){
resultado <- n1 + n2 / 2
return(resultado)
}
resultado <- media(3,7)
print(resultado)
resultado <- (n1 + n2) / 2
media <- function(n1, n2){
resultado <- (n1 + n2) / 2
return(resultado)
}
resultado <- media(3,7)
print(resultado)
numeros <- matrix(1:10)
print(numeros)
numeros <- matrix(1:10, nrow = 2)
print(numeros)
numeros <- matrix(1:10, nrow = 3)
numeros <- matrix(1:10, nrow = 3)
numeros <- matrix(1:10, nrow = 5)
print(numeros)
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
for(element in matriz){
}
}
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
acc <- 0
for(element in matriz){
acc <- acc + element
}
print(acc)
}
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
acc <- 0
for(element in matriz){
acc <- acc + element
}
return(acc)
}
resultado <- sumMatriz(numeros)
print(resultado)
# secuencias
seq(1:10)
seq(1:10, by=2)
# secuencias
seq(1, 10)
seq(1, 10, by=2)
# secuencias
seq(1, 10)
seq(1, 10, by=2)
# sorting
vector <- c(1,8,4,1,6,87,3)
sort(vector)
# revertir orden
rev(vector)
# sobre vector
vector <- c(1,2,3)
suma <- function(numero){
resultado <- numero + 10
return(resultado)
}
print(vector)
vector2 <- sapply(vector, suma)
print(vector2)
# sobre lista
lista <- list(1,2,3)
aleatorio <- function(numero){
numero.aleatorio <- sample(1:100, 1)
print(numero.aleatorio)
resultado <- numero + numero.aleatorio
return(resultado)
}
print(lista)
lista2 <- lapply(lista, aleatorio)
print(lista2)
# Funciones anonimas
vector <- c(1,2,3)
vector2 <- sapply(vector, function(numero){ numero + 2 })
vector2
# Funciones matematicas
abs(2)
# Funciones matematicas
abs(2)
abd(-4)
# Funciones matematicas
abs(2)
# Funciones matematicas
abs(2)
abs(-4)
vector <- c(-1,2,-3,4)
abs(vector)
sum(1,2,3,4)
vector <- c(1,2,3,4,5,6)
sum(vector)
matriz <- matrix(1:12, nrow = 3)
matriz
sum(matriz)
mean(matriz)
mean(vector)
valores <- sample(1:100, 12)
valores
matriz2 <- matrix(valores, nrow = 3)
matriz2
min(matriz2)
max(matriz2)
round(2.435345, 2)
round(2.435345, 3)
# Expresiones regulares
texto <- 'Hola, buenos días, como estas?'
# Expresiones regulares
texto <- 'Hola, buenos días, como estas?'
grepl('AAAAAAAAAAAAA', texto)
grepl('días', texto)
grep('días', texto)
vector <- c(1,2,3,4,5)
grep(3, vector)
grepl(3, vector)
# fecha y hora
fecha <- Sys.Date()
fecha
# fecha y hora
fecha <- Sys.Date()
fecha
fecha2 <- "2020-01-01"
class(fecha2)
class(fecha)
fecha2 <- as.Date(fecha2)
fecha2
class(fecha2)
fecha3 <- as.Date("04-01-2020", format="%m-%d-%Y")
fecha3
class(fecha3)
Sys.time()
format(Sys.time, format="%H:%M:%S")
Sys.time()
format(Sys.time, format="%H:%M:%S")
format(Sys.time(), format="%H:%M:%S")
strptime("12:00:00", format="%H:%M:%S")
# Manipulacion de datos con dplyr
# install package
install.packages('dplyr')
library(dplyr)
library(nycflights13)
library(nycflights13)
install.packages('nycflights13')
library(dplyr)
library(nycflights13)
str(flights)
head(flights)
filter(flights, month == 4, day == 10)
select(flights, origin, dest, air_time)
select(flights, origin, dest, air_time, flight)
slice(flights, 1:5)
arrange(flights, year, month, day, dep_time)
arrange(flights, year, month, day, desc(dep_time)
arrange(flights, year, month, day, desc(dep_time))
arrange(flights, year, month, day, desc(dep_time))
rename(flights, aerolina = carrier)
distinct(select(flights, carrier))
summarise(flights, media = mean(air_time, na.rm = TRUE))
# operador pipe
coches <- mtcars
head(coches)
# operador pipe
coches <- mtcars
head(coches)
# operador pipe
coches <- mtcars
head(coches)
resultado <- ararnge(sample_n(filter(coches, mpg > 20), size = 5, desc(mpg)))
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5, desc(mpg)))
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5, desc(mpg)))
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5), desc(mpg))
resultado
# operador pipe
coches <- mtcars
head(coches)
resultado <- arrange(sample_n(filter(coches, mpg > 20), size = 5), desc(mpg))
resultado
paso1 <- filter(coches, mpg > 20)
paso2 <- sample_n(paso1, size = 5)
paso3 <- arrange(paso2, desc(mpg))
resultado2 <- paso3
resultado2
resultado3 <- coches %>% filter(mpg > 20) %>% sample_n(size = 5) %>% arrange(desc(mpg))
resultado3
# limpieza de datos
# instalacion de paquetes
install.packages('tidyr')
install.packages('data.table')
library(tidyr)
library(data.table)
año <- c(2018, 2019, 2020)
enero <- c(120, 100, 80)
febrero <- c(80, 90, 140)
marzo <- c(110, 150, 70)
datos <- data.frame(año=año, enero=enero, febrero=febrero, marzo=marzo)
datos
datos
datos <- gather(datos, Mes, Ingresos, enero:marzo)
datos
help('gather')
datos <- spread(datos, Mes, Ingresos)
datos
datos2 <- data.frame(columna=c('a.b', 'c.d', 'e.f'))
datos2
datos2 <- separate(datos2, columna, c('c1', 'c2'))
datos2
datos2 <- unite(datos2, columna, c1, c2, sep = '.')
datos2
