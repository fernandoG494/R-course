head(AirPassengers)
tail(AirPassengers)
str(volcano)
summary(volcano)
meses <- c('enero', 'febrero', 'marzo')
ventas <- c(100, 120, 80)
objetivos <- c(T,T,F)
datos <- data.frame(meses, ventas, objetivos)
datos
source("~/Programming/R-course/DataFrames/Seleccion Dataframes.R")
meses <- c('enero', 'febrero', 'marzo')
ventas <- c(100, 120, 80)
objetivos <- c(T,T,F)
datos <- data.frame(meses, ventas, objetivos)
datos
datos[1,]
datos[,1]
meses <- c('enero', 'febrero', 'marzo')
ventas <- c(100, 120, 80)
objetivos <- c(T,T,F)
datos <- data.frame(meses, ventas, objetivos)
datos
datos[1,]
datos[,1]
datos[2,2]
datos[1,'ventas']
datos[1,c('meses', 'objetivos')]
subset(datos, subset = ventas >= 100)
datos
orden <- order(datos['ventas'])
meses <- c('enero', 'febrero', 'marzo')
ventas <- c(100, 120, 80)
objetivos <- c(T,T,F)
datos <- data.frame(meses, ventas, objetivos)
datos
datos[1,]
datos[,1]
datos[2,2]
datos[1,'ventas']
datos[1,c('meses', 'objetivos')]
subset(datos, subset = ventas>=100)
datos
orden <- order(datos['ventas'])
orden
datos[orden,]
orden.descendiente <- order(-datos['ventas'])
orden.descendiente
datos[1, 'ventas']
datos$ventas
datos
datos$ventas
datos$meses
datos$ventas
datos$meses
datos$objetivos
datos['objetivos']
numeros <- 1:10
letras <- letters[1:10]
numeros
letras
datos <- data.frame(col1 = numeros, col2 = letras)
datos
write.csv(datos, file='fichero.csv')
datos2 <- read.csv('fichero.csv')
datos2
datos2$X <- NULL
datos2
# juntar las filas de 2 dataframes
numero <- 1:10
letras <- letters[1:10]
datos1 <- data.frame(numeros, letras)
datos1
letras <- letters[1:10]
datos1 <- data.frame(numeros, letras)
# juntar las filas de 2 dataframes
numeros <- 1:10
letras <- letters[1:10]
datos1 <- data.frame(numeros, letras)
datos1
# juntar las filas de 2 dataframes
numeros <- 1:10
letras <- letters[1:10]
datos1 <- data.frame(numeros, letras)
datos1
datos2 <- data.frame(numeros = 11, letras = 'k')
datos2
datos3 <- rbind(datos1, datos2)
datos3
# Columnas en dataframes
numeros <- 1:5
# Columnas en dataframes
numeros <- 1:5
# Columnas en dataframes
numeros <- 1:5
letras <- letters[1:5]
datos <- data.frame(col1 = numeros, col2 = letras)
datos
datos <- data.frame(col1 = numeros, col2 = letras)
# Columnas en dataframes
numeros <- 1:5
letras <- letters[1:5]
datos <- data.frame(col1 = numeros, col2 = letras)
datos
datos$col3 <- datos$col1 * 2
datos
colnames(datos)
# Columnas en dataframes
numeros <- 1:5
letras <- letters[1:5]
datos <- data.frame(col1 = numeros, col2 = letras)
datos
datos$col3 <- datos$col1 * 2
datos
colnames(datos)
colnames(datos) <- c('c1', 'c2', 'c3')
datos
# valores nulos
any(is.na(mtcars))
head(mtcars)
# valores nulos
any(is.na(mtcars))
head(mtcars)
mtcars[is.na(mtcars)] <- 0
head(mtcars)
nombres <- c('Antonio', 'Maria', 'Juan')
edades <- c(40, 30, 35)
sexos <- c('M', 'F', 'M')
datos <- data.frame(nombres, edades, sexos)
datos
nombre <- c('Antonio', 'Maria', 'Juan')
edad <- c(40, 30, 35)
sexo <- c('M', 'F', 'M')
datos <- data.frame(nombres, edades, sexos)
nombre <- c('Antonio', 'Maria', 'Juan')
edad <- c(40, 30, 35)
sexo <- c('M', 'F', 'M')
datos <- data.frame(nombre, edad, sexo)
datos
autos <- mtcars
autos
# 1.- Crear la variable de coches que almacene el dataset mtcars
autos <- mtcars
# 2.- Verificar si coches es un dataframe
class(autos)
# 1.- Crear la variable de coches que almacene el dataset mtcars
autos <- mtcars
# 2.- Verificar si coches es un dataframe
class(autos)
# 3.- Imprimir las primeras seis lineas
autos[1:6]
# 3.- Imprimir las primeras seis lineas
autos[,1:6]
# 3.- Imprimir las primeras seis lineas
autos[1:6,]
# 1.- Crear la variable de coches que almacene el dataset mtcars
autos <- mtcars
# 2.- Verificar si coches es un dataframe
class(autos)
# 3.- Imprimir las primeras seis lineas
autos[1:6,]
# 1.- Crear la variable de coches que almacene el dataset mtcars
coches <- mtcars
# 2.- Verificar si coches es un dataframe
class(coches)
# 3.- Imprimir las primeras seis lineas de coches
coches[1:6,]
# 4.- Cual es la media de la columna mpg
mean(coches$mpg)
# 5.- Cual es el valor de cyl para el coche 'Mazda RX4'
coches['Mazda RX4',]$cyl
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8,]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 && coches$disp > 400,]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 & & coches$disp > 400,]
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 & coches$disp > 400,]
subset(coches, cyl == 8 & disp > 400)
# 7.- Selecciona las columnas disp y wt
coches[,c('disp', 'wt')]
# 1.- Crear la variable de coches que almacene el dataset mtcars
coches <- mtcars
# 2.- Verificar si coches es un dataframe
class(coches)
# 1.- Crear la variable de coches que almacene el dataset mtcars
coches <- mtcars
coches
# 2.- Verificar si coches es un dataframe
class(coches)
# 3.- Imprimir las primeras seis lineas de coches
head(coches, 6)
coches[1:6,]
# 4.- Cual es la media de la columna mpg
mean(coches$mpg)
# 5.- Cual es el valor de cyl para el coche 'Mazda RX4'
coches['Mazda RX4',]$cyl
# 6.- Selecciona las filas de coches donde la columna cyl es igual a 8 y la columna disp > 400
coches[coches$cyl == 8 & coches$disp > 400,]
subset(coches, cyl == 8 & disp > 400)
# 7.- Selecciona las columnas disp y wt
coches[,c('disp', 'wt')]
# 8.- Crear una nueva columna, rendimiento que sea igual a hp/wt
coches$rendimiento <- coches$hp / coches$wt
head(coches)
clear
source("~/Documentos/Programming/R-course/Entrada y salida de datos/Entrada y salida de datos.R", echo=TRUE)
matriz
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
matriz
write.csv(matriz, file = 'Entrada y salida de datos/fichero1.csv')
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
matriz
write.csv(matriz, file = 'Entrada y salida de datos/fichero1.csv')
datos <- read.csv('Entrada y salida de datos/fichero1.csv')
datos
# Ficheros en CSV
matriz <- matrix(1:16, nrow = 4)
matriz
write.csv(matriz, file = 'Entrada y salida de datos/fichero1.csv')
datos <- read.csv('Entrada y salida de datos/fichero1.csv')
datos
datos$X <- NULL
datos
class(datos)
head(datos)
datos$suma <- datos$V1 + datos$V2 + datos$V3 + datos$V4
datos
write.csv(datos, file = 'Entrada y salida de datos/fichero1a.csv')
# Ficheros EXCEL
# instalar paquete
install.packages('readxl')
# Ficheros EXCEL
# instalar paquete
install.packages('readxl')
#cargar libreria
library('readxl')
excel_sheets('Entrada y salida de datos/poblacion.xlsx')
datos <- read_excel('Entrada y salida de datos/poblacion.xlsx', sheet = 'Hoja 1')
datos
datos&Continente
excel_sheets('Entrada y salida de datos/poblacion.xlsx')
datos <- read_excel('Entrada y salida de datos/poblacion.xlsx', sheet = 'Hoja 1')
datos
datos&Continente
datos$Continente
datos
datos$Continente
datos$Densidad
str(datos)
str(datos)
excel <- lapply(excel_sheets('Entrada y salida de datos/poblacion.xlsx'), read_excel, path('Entrada y salida de datos/poblacion.xlsx'))
excel <- lapply(excel_sheets('Entrada y salida de datos/poblacion.xlsx'), read_excel, path('poblacion.xlsx'))
excel
excel
excel <- lapply(excel_sheets('Entrada y salida de datos/poblacion.xlsx'), read_excel, path('poblacion.xlsx'))
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
connection <- dbConnect(RSQLite::SQLite(), "basededatos.db")
res <- dbSendQuery(connection, 'SELECT * from coches WHERE cyl = 8')
dbClearResult(res)
connection <- dbConnect(RSQLite::SQLite(), "basededatos.db")
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
# referencia a la libreria
library(RSQLite)
connection <- dbConnect(RSQLite::SQLite(), "basededatos.db")
dbWriteTable(connection, "coches", mtcars)
dbWriteTable(connection, "coches", mtcars)
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
# Bases de datos
# instalar paquete SQL
install.packages('RSQLite')
# Operadores logicos
numeros <- 20
# Operadores logicos
numeros <- 20
numero > 10
# Operadores logicos
numero <- 20
numero > 10
# part 2
head(mtcars)
datos <- mtcars
head(datos)
subset(datos, mpg > 20)
subset(datos, mpg > 20 & cyl == 6)
subset(datos, !(cyl == 6))
# Bucle while
numero <- 1
while(numero < 10){
texto <- paste("EL numero vale ", numero)
print(texto)
if(numero == 5){
break
}
numero <- numero + 1
}
# Bucle for
vector <- c(1,2,3,4)
for(elemento in vector){
print(elemento)
}
lista <- c(12, c(1,2,3), mtcars)
for(elemento in vector){
print(elemento)
}
lista <- c(12, c(1,2,3), mtcars)
for(elemento in lista){
print(elemento)
}
# funciones
hola <- function(nombre){
print("Hola, buenos dias")
}
hola("Fernando")
# funciones
hola <- function(nombre){
texto <- paste("Hola, buenos dias ", nombre)
print(texto)
}
# funciones
hola <- function(nombre){
texto <- paste("Hola, buenos dias ", nombre)
print(texto)
}
hola("Fernando")
sumar <-function(n1, n2){
resultado <- n1 + n2
print(resultado)
}
hola("Fernando")
# funciones
hola <- function(nombre){
texto <- paste("Hola, buenos dias", nombre)
print(texto)
}
hola("Fernando")
sumar <-function(n1, n2){
resultado <- n1 + n2
print("[1]: ", resultado)
return(resultado)
}
resultado <- sumar(1,4)
print("[2]: ", resultado)
sumar <-function(n1, n2){
resultado <- n1 + n2
return(resultado)
}
resultado <- sumar(8,4)
print(resultado)
vector <- c(1,2,3,4,5)
resultado <- sum(vector)
print(resultado)
numero <- 3
if(numero %% 2){
print("Es par")
}else{
print("Es impar")
}
typeof(num)
num <- 4
car <- "A"
typeof(num)
typeof(car)
num <- 4
car <- "A"
if(typeof(num) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- 4
if(typeof(element) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- "A"
if(typeof(element) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- "asdasd"
if(typeof(element) == "character"){
print("Is a character")
}else{
print("Is a number")
}
element <- "asdasd"
if(typeof(element) == "character"){
print("Is a character")
}else if(typeof(element) == "double"){
print("Is a number")
}else{
print("Is a string")
}
numeros <- c(1,2,3,7,6,4,5)
maximo <- function(vector){
maximo <- 0
for(num in vector){
if(num > maximo){
maximo = num
}
}
return(maximo)
}
resultado <- maximo(numeros)
numeros <- c(1,2,3,7,6,4,5)
maximo <- function(vector){
maximo <- 0
for(num in vector){
if(num > maximo){
maximo = num
}
}
return(maximo)
}
resultado <- maximo(numeros)
print(resultado)
media <- function(n1, n2){
resultado <- n1 + n2 / 2
return(resultado)
}
resultado <- media(media)
media <- function(n1, n2){
resultado <- n1 + n2 / 2
return(resultado)
}
resultado <- media(3,7)
print(resultado)
resultado <- (n1 + n2) / 2
media <- function(n1, n2){
resultado <- (n1 + n2) / 2
return(resultado)
}
resultado <- media(3,7)
print(resultado)
numeros <- matrix(1:10)
print(numeros)
numeros <- matrix(1:10, nrow = 2)
print(numeros)
numeros <- matrix(1:10, nrow = 3)
numeros <- matrix(1:10, nrow = 3)
numeros <- matrix(1:10, nrow = 5)
print(numeros)
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
for(element in matriz){
}
}
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
acc <- 0
for(element in matriz){
acc <- acc + element
}
print(acc)
}
numeros <- matrix(1:9, nrow = 3)
print(numeros)
sumMatriz <- function(matriz) {
acc <- 0
for(element in matriz){
acc <- acc + element
}
return(acc)
}
resultado <- sumMatriz(numeros)
print(resultado)
# secuencias
seq(1:10)
seq(1:10, by=2)
# secuencias
seq(1, 10)
seq(1, 10, by=2)
# secuencias
seq(1, 10)
seq(1, 10, by=2)
# sorting
vector <- c(1,8,4,1,6,87,3)
sort(vector)
# revertir orden
rev(vector)
